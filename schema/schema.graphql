# ===================================
# Common input types
# ===================================
input LatLngInput {
  lat: Float!
  lng: Float!
}

input LocationInput {
  address: String!
  latlng: LatLngInput!
}

input ContactInput {
  platform: String!
  value: String!
}

# ===================================
# Common object types
# ===================================
type LatLng {
  lat: Float!
  lng: Float!
}

type Location {
  address: String!
  latlng: LatLng!
}

type Contact {
  platform: String!
  value: String!
}

# ===================================
# Chat related types
# ===================================
type Chat {
  entryId: String!
  message: String!
  type: String!
  userId: String!
  chatTopicId: String!
  updateDate: String!
}

type ChatTopic {
  entryId: String!
  title: String!
  updateDate: String!
}

input ChatChunkInput {
  response: String!
  chatTopicId: String
  userId: String
  entryId: String
}

type ChatOut {
  response: String!
  chatTopicId: String
  userId: String
  entryId: String
}

input ChatIn {
  query: String!
  userId: String!
  chatTopicId: String
}

# ===================================
# Startup related types
# ===================================
type Milestone {
  title: String!
  dateAchieved: String!
  description: String
}

input MilestoneInput {
  title: String!
  dateAchieved: String!
  description: String
}

type Founder {
  founderId: String!
  name: String!
  role: String
  dateJoined: String
  overview: String
  photoObjectkey: String
  contacts: [Contact!]!
}

input FounderInput {
  founderId: String!
  name: String!
  role: String
  dateJoined: String
  overview: String
  photoObjectkey: String
  contacts: [ContactInput!]!
}

type Startup {
  startupId: String!
  startUpName: String!
  email: String!
  logoObjectKey: String
  dateFounded: String
  industries: [String!]!
  startupStage: String
  description: String
  location: Location
  contacts: [Contact!]!
  revenueModel: [String!]!
  milestones: [Milestone!]!
  founders: [Founder!]!
  createdAt: String
  isSaved: Boolean
  visibility: Boolean
  nameChangeRequestStatus: Boolean
}

input StartupInput {
  startUpName: String!
  email: String
  logoObjectKey: String
  dateFounded: String
  startupStage: String
  description: String
  revenueModel: [String!]!
  location: LocationInput
  industries: [String!]!
  contacts: [ContactInput!]!
  milestones: [MilestoneInput!]!
  founders: [FounderInput!]!
}

# ===================================
# Enabler related types
# ===================================
type InvestmentCriteria {
  criteriaName: String!
  details: String
}

input InvestmentCriteriaInput {
  criteriaName: String!
  details: String
}

type PortfolioItem {
  supportedStartupProject: String!
  dateSupported: String
  isSupportingToPresent: Boolean!
  roleAndImpact: String
}

input PortfolioItemInput {
  supportedStartupProject: String!
  dateSupported: String
  isSupportingToPresent: Boolean!
  roleAndImpact: String
}

type Enabler {
  enablerId: String!
  enablerName: String!
  email: String!
  logoObjectKey: String
  dateFounded: String
  organizationType: [String!]!
  description: String
  location: Location
  contacts: [Contact!]!
  industryFocus: [String!]!
  supportType: [String!]!
  fundingStageFocus: [String!]!
  investmentAmount: Float
  startupStagePreference: [String!]!
  preferredBusinessModels: [String!]!
  investmentCriteria: [InvestmentCriteria!]!
  portfolio: [PortfolioItem!]!
  createdAt: String
  isSaved: Boolean
  visibility: Boolean
  nameChangeRequestStatus: Boolean
}

input EnablerInput {
  enablerName: String!
  email: String
  logoObjectKey: String
  dateFounded: String
  organizationType: [String!]!
  description: String
  location: LocationInput
  contacts: [ContactInput!]!
  industryFocus: [String!]!
  supportType: [String!]!
  fundingStageFocus: [String!]!
  investmentAmount: Float
  startupStagePreference: [String!]!
  preferredBusinessModels: [String!]!
  investmentCriteria: [InvestmentCriteriaInput!]!
  portfolio: [PortfolioItemInput!]!
}

# ===================================
# Entity related types
# ===================================

enum EntityType {
  STARTUP
  ENABLER
}

union Entity = Startup | Enabler

# ===================================
# Mutation related types
# ===================================

type MutationResponse {
  id: String
  message: String
  success: Boolean
}

type SendChatResponse {
  entryId: String
  message: String
  success: Boolean
  chatTopicId: String
}

# ===================================
# Analytics related types
# ===================================

type InvestorEngagementData {
  month: String!
  year: String!
  responded: Float!
  ignored: Float!
}

type MatchConfidenceData {
  month: String!
  year: String!
  confidence: Float!
  threshold: Float!
}

type StartupEngagementData {
  month: String!
  year: String!
  responded: Float!
  ignored: Float!
}

type StartupMaturityData {
  stage: String!
  count: Int!
}

type InvestorRecommendation {
  name: String
  confidence: String!
  score: Float!
}

type Analytics {
  matchConfidence: [MatchConfidenceData!]!
  investorEngagement: [InvestorEngagementData]
  startupEngagement: [StartupEngagementData]
  startupMaturity: [StartupMaturityData]
  topInvestorRecommendations: [InvestorRecommendation]
}

# ===================================
# Admin related types
# ===================================

type NameChangeRequest {
  requestId: String!
  entityId: String!
  entityType: EntityType!
  newName: String!
  originalName: String!
  isApproved: Boolean
  requestType: String!
  updatedAt: String!
}

input RequestNameChangeInput {
  entityId: String!
  entityType: EntityType!
  newName: String!
  originalName: String
}

input RespondNameChangeInput {
  entityId: String!
  entityType: EntityType!
  requestId: String!
  isApproved: Boolean!
}

type MapListAdminResponse {
  mapList: [Entity!]!
  requestList: [NameChangeRequest!]!
  startupLength: Int!
  enablersLength: Int!
  pendingRequestsLength: Int!
}

# ===================================
# Profile related types
# ===================================
input SaveProfileInput {
  entityType: EntityType!
  entityId: String!
  savedProfileId: String!
  savedProfileType: EntityType!
}

# ===================================
# Root types
# ===================================


type Query {
  getChatTopics(userId: String!): [ChatTopic!] @aws_api_key
  getChats(chatTopicId: String!, userId: String!): [Chat!] @aws_api_key
  getStartupProfile(startupId: String!): Startup! @aws_api_key
  getEnablerProfile(enablerId: String!): Enabler! @aws_api_key
  getMapList(entityId: String!, entityType: EntityType!, filterEntityType: EntityType): [Entity!] @aws_api_key
  getSuggestions(entityType: EntityType!, entityId: String!): [Entity!]! @aws_api_key
  getAnalytics(entityType: EntityType!, entityId: String!): Analytics! @aws_api_key
  getSavedProfiles(entityType: EntityType!, entityId: String!): [Entity!]! @aws_api_key
  getNameChangeRequests(isApproved: Boolean): [NameChangeRequest!]! @aws_api_key
  getMapListAdmin: MapListAdminResponse! @aws_api_key
}

type Mutation {
  sendChat(input: ChatIn!): SendChatResponse! @aws_api_key
  sendChatChunk(input: ChatChunkInput!): ChatOut! @aws_api_key
  createStartup(input: StartupInput!): MutationResponse! @aws_api_key
  updateStartup(input: StartupInput!, startupId: String!): MutationResponse!
    @aws_api_key
  createEnabler(input: EnablerInput!): MutationResponse! @aws_api_key
  updateEnabler(input: EnablerInput!, enablerId: String!): MutationResponse!
    @aws_api_key
  saveProfile(input: SaveProfileInput!): MutationResponse! @aws_api_key
  unsaveProfile(input: SaveProfileInput!): MutationResponse! @aws_api_key
  requestNameChange(input: RequestNameChangeInput!): MutationResponse! @aws_api_key
  respondNameChange(input: RespondNameChangeInput!): MutationResponse! @aws_api_key
}

type Subscription {
  onChatResponse(chatTopicId: String, userId: String): ChatOut
    @aws_subscribe(mutations: ["sendChatChunk"])
}
